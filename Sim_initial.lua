	-- title:			Flight test
-- author:  Lassi (87x), Lima25 (?), PoketMarty04 (?), Bacco04 (?)
-- desc:    3D flightsim concept
-- version: 0
-- script:  lua
-- input: mouse

-- +X right, +Y forward, +Z up

m=math
sin=m.sin
cos=m.cos
tan=m.tan

tau=m.pi*2
pi=m.pi

rad=m.rad
deg=m.deg

abs=m.abs

w,h=240,136 -- screen size
hw,hh=w//2,h//2 -- half screen size

t=0
x=96
y=24

-- quality of life functions for unit conversion
function tr(n)
	return tan(rad(n))
end
function tm(n)
	return tan(n/1000)
end

-- some of these functions from https://github.com/Jumper-44/Stormworks_Delaunay-Triangulation
local function Vec3(x,y,z) return
    {x=x or 0;y=y or 0;z=z or 0;
    add =   function(a,b) return Vec3(a.x+b.x, a.y+b.y, a.z+b.z) end;
    sub =   function(a,b) return Vec3(a.x-b.x, a.y-b.y, a.z-b.z) end;
    scale = function(a,b) return Vec3(a.x*b, a.y*b, a.z*b) end;
    dot =   function(a,b) return (a.x*b.x + a.y*b.y + a.z*b.z) end;
    cross = function(a,b) return Vec3(a.y*b.z-a.z*b.y, a.z*b.x-a.x*b.z, a.x*b.y-a.y*b.x) end;
    len =   function(a) return a:dot(a)^0.5 end;
    normalize = function(a) return a:scale(1/a:len()) end;
    unpack = function(a, ...) return a.x, a.y, a.z, ... end}
end
local Clamp = function(x,s,l) return x < s and s or x > l and l or x end
clamp=Clamp -- alternative capitalisation
function gn(...)
	o={}
	i2=...
	for i,v in ipairs({...}) do
		table.insert(o,input.getNumber(v or i2))
		i2=i2+1
	end
	while i2<32 do
		table.insert(o,input.getNumber(i2))
		i2=i2+1
	end
	return table.unpack(o)
end
function round(...)
	o={}
	for i,v in ipairs({...}) do
		table.insert(o,m.floor(v+.5))
	end
	return table.unpack(o)
end
inputs={}
input={}
function input.getNumber(n) -- hack: emulate stormworks input.getNumber behavior for code reuse
	return inputs[n] or 0
end

local MatrixMul = function(m1,m2)
    local r = {}
    for i=1,#m2 do
        r[i] = {}
        for j=1,#m1[1] do
            r[i][j] = 0
            for k=1,#m1 do
                r[i][j] = r[i][j] + m1[k][j] * m2[i][k]
            end
        end
    end
    return r
end

FOV=tan(rad(30//2)) -- initial vertical FOV

function cSS(x,y) -- convert pixel coord to a fraction of FOV
			return hw+hh*x/FOV,hh-hh*y/FOV
end

sun=Vec3(0,0,1)

-- initial locations
cam={x=-20,y=15,z=1.5,r=0,p=rad(-5),h=rad(125)}
jet={x=0,y=0,z=0,r=0,p=0,h=0}
tris={{{x=0,y=10,z=1},{x=1,y=10,z=-1},{x=-1,y=10,z=-1},c=1}} -- final 3D triangles to draw
stick={x=0,y=0}

function nVec3(v)
			return Vec3(v[1] or v.x,v[2] or v.y,v[3] or v.z)
end
function nMatrix(v)
			return {{v[1] or v.x,v[2] or v.y,v[3] or v.z}}
end

-- "ml" stands for "make local" 

function ml(v,l) -- expensive ml function. here for fallback
			l=l or 1 -- default: local to camera
			local x1,y1,z1=v[1].x-l*cam.x,v[1].y-l*cam.y,v[1].z-l*cam.z
			local x2,y2,z2=v[2].x-l*cam.x,v[2].y-l*cam.y,v[2].z-l*cam.z
			local x3,y3,z3=v[3].x-l*cam.x,v[3].y-l*cam.y,v[3].z-l*cam.z
			local m1,m2,m3={{x1,y1,z1}},{{x2,y2,z2}},{{x3,y3,z3}}
			local m1=MatrixMul(mhdg2,m1)
			local m2=MatrixMul(mhdg2,m2)
			local m3=MatrixMul(mhdg2,m3)
			local m1=MatrixMul(mpitch2,m1)
			local m2=MatrixMul(mpitch2,m2)
			local m3=MatrixMul(mpitch2,m3)
			local m1=MatrixMul(mroll2,m1)
			local m2=MatrixMul(mroll2,m2)
			local m3=MatrixMul(mroll2,m3)
			return m1,m2,m3
end
function mlR(v,l) -- expensive reverse ml function
			l=l or 0 -- default: not local to camera
			local x1,y1,z1=v[1].x-l*cam.x,v[1].y-l*cam.y,v[1].z-l*cam.z
			local x2,y2,z2=v[2].x-l*cam.x,v[2].y-l*cam.y,v[2].z-l*cam.z
			local x3,y3,z3=v[3].x-l*cam.x,v[3].y-l*cam.y,v[3].z-l*cam.z
			local m1,m2,m3={{x1,y1,z1}},{{x2,y2,z2}},{{x3,y3,z3}}
			local m1=MatrixMul(mroll,m1)
			local m2=MatrixMul(mroll,m2)
			local m3=MatrixMul(mroll,m3)
			local m1=MatrixMul(mpitch,m1)
			local m2=MatrixMul(mpitch,m2)
			local m3=MatrixMul(mpitch,m3)
			local m1=MatrixMul(mhdg,m1)
			local m2=MatrixMul(mhdg,m2)
			local m3=MatrixMul(mhdg,m3)
			return m1,m2,m3
end
function ml2(v,l) -- much more efficient ml funcion using precalculated vectors
			l=l or 1 -- default: local to camera
			local x1,y1,z1=v[1].x-l*cam.x,v[1].y-l*cam.y,v[1].z-l*cam.z
			local x2,y2,z2=v[2].x-l*cam.x,v[2].y-l*cam.y,v[2].z-l*cam.z
			local x3,y3,z3=v[3].x-l*cam.x,v[3].y-l*cam.y,v[3].z-l*cam.z
			local v1,v2,v3=Vec3(x1,y1,z1),Vec3(x2,y2,z2),Vec3(x3,y3,z3)
			local rx1,ry1,rz1=vecX:dot(v1),vecY:dot(v1),vecZ:dot(v1)
			local rx2,ry2,rz2=vecX:dot(v2),vecY:dot(v2),vecZ:dot(v2)
			local rx3,ry3,rz3=vecX:dot(v3),vecY:dot(v3),vecZ:dot(v3)
			return {{rx1,ry1,rz1}},{{rx2,ry2,rz2}},{{rx3,ry3,rz3}}
end

vecX_G=Vec3(1,0,0) -- global right vector
vecY_G=Vec3(0,1,0) -- global forward vector
vecZ_G=Vec3(0,0,1) -- global up vector

positions={cam=cam,jet=jet} -- raw position data before conversion to frames. change here, result goes to frames
frames={} -- rotation matrices for each individual model. the expensive to calculate "rotation frames", done from positions. do not change, result comes from positions. uses same keys as positions
phys={} -- physics acting on each position. same keys as positions/frames
shift={jet=Vec3(0,0,0),bomba0=Vec3(2.25,-0.2,-0.211073),bomba1=Vec3(-2.25,-0.2,-0.211073)} -- origin of various models. not used until they have their own position separate from default (jet)

phys.jet={v=Vec3(0,0,0),a={g=Vec3(0,0,-9.81/60^2),debug_holdup=Vec3(0,0,9.81/60^2)}} -- try not to edit existing variables here. instead make new parts of acceleration table. not used until it has its own position

phys_ts=2 -- physics tick skip

q=jet -- current position source

function clone(tab) -- clone a table
	return {table.unpack(tab)}
end

-- create and store frame of rotation from position information
function jumble(roll,rpitch,rhdg,dframe)
	local check=frames[dframe] -- check if it has already been calculated before
	if not check or (check.roll~=roll or check.rpitch~=rpitch or check.rhdg~=rhdg) then -- check whether the matrix needs to be computed, possibly again
		mroll={{cos(-roll),0,sin(-roll)},{0,1,0},{-sin(-roll),0,cos(-roll)}}
		mpitch={{1,0,0},{0,cos(rpitch),sin(rpitch)},{0,-sin(rpitch),cos(rpitch)}}
		mhdg={{cos(-rhdg),sin(-rhdg),0},{-sin(-rhdg),cos(-rhdg),0},{0,0,1}}
		mroll2={{cos(roll),0,sin(roll)},{0,1,0},{-sin(roll),0,cos(roll)}}
		mpitch2={{1,0,0},{0,cos(-rpitch),sin(-rpitch)},{0,-sin(-rpitch),cos(-rpitch)}}
		mhdg2={{cos(rhdg),sin(rhdg),0},{-sin(rhdg),cos(rhdg),0},{0,0,1}}
		vecX,vecY,vecZ=mlR({vecX_G,vecY_G,vecZ_G})
		vecX,vecY,vecZ=nVec3(vecX[1]),nVec3(vecY[1]),nVec3(vecZ[1])
		frame=dframe or frame
		frames[frame]={
		mroll=clone(mroll),mpitch=clone(mpitch),mhdg=clone(mhdg),
		mroll2=clone(mroll2),mpitch2=clone(mpitch2),mhdg2=clone(mhdg2),
		vecX=vecX,vecY=vecY,vecZ=vecZ,
		roll=roll,rpitch=rpitch,rhdg=rhdg
		} -- clone probably leaks memory. hope GC catches it.
	elseif check then -- if no computing required, just take from table if it's in the table
		frame=dframe
		mroll=check.mroll
		mpitch=check.mpitch
		mhdg=check.mhdg
		mroll2=check.mroll2
		mpitch2=check.mpitch2
		mhdg2=check.mhdg2
		vecX,vecY,vecZ=check.vecX,check.vecY,check.vecZ
	end
end

function TIC() -- game function run each tick
	texts={}

	stick.x,stick.y=stick.x*.95,stick.y*.95
	if btn(2) then stick.x=stick.x-.5 end
	if btn(3) then stick.x=stick.x+.5 end
	if btn(0) then stick.y=stick.y+.5 end
	if btn(1) then stick.y=stick.y-.5 end
	if btn(4) then jet.r=jet.r+.005 end
	if btn(5) then jet.r=jet.r-.005 end
	stick.x,stick.y=clamp(stick.x,-10,10),clamp(stick.y,-10,10) -- stick is the flight stick. TBD: pedals,throttle. currently it's just used to walk camera around
	
	cam.h=cam.h+stick.x/600
	cam.x=cam.x+sin(cam.h)*stick.y/60
	cam.y=cam.y+cos(cam.h)*stick.y/60

	cls(0)
	--print(string.format("%+02.2f %+02.2f",stick.x,stick.y),0,10)
	t=t+1 -- tick since start
	
	tris={} -- triangles directly to drawing
	
	-- load models
	model=models_parsed[1]
	osh=Vec3() -- origin shift
	for ii,vv in ipairs(model["f"]) do
				local p1,p2,p3,n1,n2,n3=vv[1],vv[3],vv[5],vv[2],vv[4],vv[6] -- points and normals requested
				local v1,v2,v3,vn1,vn2,vn3=model["v"][p1],model["v"][p2],model["v"][p3],model["vn"][n1],model["vn"][n2],model["vn"][n3] -- real points and normals
				c2=(v1[4]*v1[5]*v1[6]~=1) and 8 or 0
				if v1.o~=frame then
					osh=Vec3()
					q=positions[v1.o] or jet -- get position
					if shift[vv.o] and positions[vv.o] then
						osh=shift[vv.o]
						table.insert(texts,{vv.o,0,#texts*7})
					end
					jumble(q.r,q.p,q.h,v1.o)
				end
				v1,v2,v3,vn1,vn2,vn3=nVec3(v1):sub(osh),nVec3(v2):sub(osh),nVec3(v3):sub(osh),nVec3(vn1),nVec3(vn2),nVec3(vn3)
				m1,m2,m3=ml2({v1,v2,v3},0)
				m4,m5,m6=ml2({vn1,vn2,vn3},0)
				v1,v2,v3,vn1,vn2,vn3=Vec3(q.x+m1[1][1],q.y+m1[1][2],q.z+m1[1][3]),Vec3(q.x+m2[1][1],q.y+m2[1][2],q.z+m2[1][3]),Vec3(q.x+m3[1][1],q.y+m3[1][2],q.z+m3[1][3]),Vec3(m4[1][1],m4[1][2],m4[1][3]),Vec3(m5[1][1],m5[1][2],m5[1][3]),Vec3(m6[1][1],m6[1][2],m6[1][3])
				shade=(vn1:add(vn2:add(vn3))):dot(sun)
				c=c2+Clamp(math.floor(3.5+shade*1.17),1,7) or 1 -- color for shading
				if c==0 then c=8 end
				if vv.o=="fusolage" or vv.o=="canopy" or vv.o=="bomba0" or vv.o=="bomba1" then -- temporary hack
						table.insert(tris,{v1,v2,v3,c=c,frame=frame})
				end
	end

	-- physics. TBD: angular velocity and rotational forces
	for i,v in pairs(phys) do
		local q=positions[i]
		if not positions[i] then
			goto nophys
		end
		for ii,vv in pairs(v.a) do
			v.v=v.v:add(vv)
		end
		q.x,q.y,q.z=q.x+v.v.x,q.y+v.v.y,q.z+v.v.z
		::nophys::
	end

	jumble(cam.r,cam.p,cam.h,"camera")
	
	--print(#tris..", "..(done and "done" or "not done"),0,60)
	--[[table.sort(tris,function(t1,t2) -- painter's algorithm
			local x1,y1,z1=t1[1].x+t1[2].x+t1[3].x-cam.x*3,t1[1].y+t1[2].y+t1[3].y-cam.y*3,t1[1].z+t1[2].z+t1[3].z-cam.z*3
			local x2,y2,z2=t2[1].x+t2[2].x+t2[3].x-cam.x*3,t1[1].y+t1[2].y+t1[3].y-cam.y*3,t1[1].z+t1[2].z+t1[3].z-cam.z*3
			d1=vecZ:dot({x=x1,y=y1,z=z1})
			d2=vecZ:dot({x=x2,y=y2,z=z2})
			return d1>d2
	end)]]
	for i,v in ipairs(tris) do
				local m1,m2,m3=ml2(v)
				
				-- cull behind near plane
				if m1[1][2]<.1 or m2[1][2]<.1 or m3[1][2]<.1 then
							goto skip
				end
				
				local cx1,cy1=m1[1][1]/m1[1][2],m1[1][3]/m1[1][2]
				local cx2,cy2=m2[1][1]/m2[1][2],m2[1][3]/m2[1][2]
				local cx3,cy3=m3[1][1]/m3[1][2],m3[1][3]/m3[1][2]
				
				-- cull outside view
				if abs(cx1)>w*2 and abs(cx2)>FOV*2 and abs(cx3)>FOV*2 then
							goto skip
				end
				
				local dx1,dy1=cSS(cx1,cy1)
				local dx2,dy2=cSS(cx2,cy2)
				local dx3,dy3=cSS(cx3,cy3)
				
				--print(c,dx1,dy1)
				ttri(dx1,dy1,
				dx2,dy2,
				dx3,dy3,
				v.c%8,v.c//8+128,
				v.c%8+1,v.c//8+129,
				v.c%8,v.c//8+129,
				0,
				0,
				m1[1][2],
				m2[1][2],
				m3[1][2]
				)
				--pix(dx1,dy1,v.c)
				--if true and v.frame~="fusolage" then
				--	table.insert(texts,{v.frame,dx1,dy1})
				--end
				--print(string.format("%+01.3f,%+01.3f",cx1,cy1),0,20)
				::skip::
	end
	for i,v in ipairs(texts) do
		print(table.unpack(v))
	end
	--print("tris:"..#tris,0,0)
	--print("X:"..vecX.x..","..vecX.y..","..vecX.z..",",0,10)
	--print("Y:"..vecY.x..","..vecY.y..","..vecY.z..",",0,20)
	--print("Z:"..vecZ.x..","..vecZ.y..","..vecZ.z..",",0,30)
end

models_raw={
[[
# Blender 3.5.1
# www.blender.org
o fusolage
v -0.531376 -3.859019 1.062819 1.0000 1.0000 1.0000
v -0.754903 -4.342340 0.206208 1.0000 1.0000 1.0000
v 0.000000 -7.555329 0.410883 1.0000 1.0000 1.0000
v 0.000000 -7.927447 0.935911 1.0000 1.0000 1.0000
v -0.673887 2.467996 0.854311 1.0000 1.0000 1.0000
v 0.000000 3.285362 -0.582424 1.0000 1.0000 1.0000
v 0.000000 5.739114 -0.594358 1.0000 1.0000 1.0000
v -0.405700 5.710855 -0.377153 1.0000 1.0000 1.0000
v -0.477486 6.185968 0.584134 1.0000 1.0000 1.0000
v -0.565937 6.377491 -0.055462 1.0000 1.0000 1.0000
v -0.396087 6.971295 0.296258 1.0000 1.0000 1.0000
v -0.268297 6.525640 0.642023 1.0000 1.0000 1.0000
v 0.000000 7.249429 0.336247 1.0000 1.0000 1.0000
v -0.472758 4.418923 0.726595 1.0000 1.0000 1.0000
v -0.583721 6.197536 0.311501 1.0000 1.0000 1.0000
v -0.600567 3.943285 -0.114438 1.0000 1.0000 1.0000
v -0.374047 -1.218932 -0.578121 1.0000 1.0000 1.0000
v -0.833880 -0.244701 0.328703 1.0000 1.0000 1.0000
v -0.693875 3.933032 0.255884 1.0000 1.0000 1.0000
v -0.375305 3.939402 -0.491750 1.0000 1.0000 1.0000
v -0.697787 3.161712 -0.558104 1.0000 1.0000 1.0000
v -0.973627 3.081568 0.100160 1.0000 1.0000 1.0000
v -0.863361 3.628467 0.057967 1.0000 1.0000 1.0000
v -0.606454 3.633325 -0.522150 1.0000 1.0000 1.0000
v -0.739181 3.675229 0.261655 1.0000 1.0000 1.0000
v -0.695823 3.196662 0.407817 1.0000 1.0000 1.0000
v -0.371916 3.642201 -0.535237 1.0000 1.0000 1.0000
v -0.592699 2.010821 -0.195393 1.0000 1.0000 1.0000
v -0.761531 -4.669816 -0.085327 1.0000 1.0000 1.0000
v -0.892868 -1.019317 -0.404332 1.0000 1.0000 1.0000
v -0.373494 -6.535595 0.505902 1.0000 1.0000 1.0000
v 0.000000 -8.379435 2.851973 1.0000 1.0000 1.0000
v 0.000000 -8.932173 2.759876 1.0000 1.0000 1.0000
v -0.268852 3.224286 -0.587662 1.0000 1.0000 1.0000
v -0.232214 6.714540 -0.428976 1.0000 1.0000 1.0000
v 0.000000 -7.871566 0.676378 1.0000 1.0000 1.0000
v -0.494136 -4.669728 -0.252991 1.0000 1.0000 1.0000
v -0.270693 -4.667960 -0.070116 1.0000 1.0000 1.0000
v -0.332457 -4.661724 0.145779 1.0000 1.0000 1.0000
v -0.646627 -4.668502 0.205219 1.0000 1.0000 1.0000
v -0.529614 -3.408218 -0.013312 1.0000 1.0000 1.0000
v -0.012805 -7.100605 2.642565 1.0000 1.0000 1.0000
v 0.000000 -7.033170 2.777957 1.0000 1.0000 1.0000
v -0.017304 -7.693771 2.880327 1.0000 1.0000 1.0000
v 0.000000 -6.970330 2.679592 1.0000 1.0000 1.0000
v -0.017320 -5.687507 1.262265 1.0000 1.0000 1.0000
v -6.604424 -1.983257 0.816511 1.0000 1.0000 1.0000
v -0.375432 -3.121869 1.222325 1.0000 1.0000 1.0000
v -4.112300 -0.819158 0.961986 1.0000 1.0000 1.0000
v -0.650667 -1.604838 1.037775 1.0000 1.0000 1.0000
v -1.418206 0.440915 1.210303 1.0000 1.0000 1.0000
v -4.116442 -0.875000 1.033536 1.0000 1.0000 1.0000
v -0.946289 2.569947 1.150222 1.0000 1.0000 1.0000
v -0.287058 1.842238 1.301260 1.0000 1.0000 1.0000
v -4.112922 -0.578990 0.972782 1.0000 1.0000 1.0000
v -0.623089 -0.097641 1.045825 1.0000 1.0000 1.0000
v -0.413432 3.256099 1.160535 1.0000 1.0000 1.0000
v -1.423214 0.535621 1.081182 1.0000 1.0000 1.0000
v -6.606133 -3.245158 0.820182 1.0000 1.0000 1.0000
v -0.892868 -1.019317 -0.404332 1.0000 1.0000 1.0000
v 0.531376 -3.859019 1.062819 1.0000 1.0000 1.0000
v 0.754903 -4.342340 0.206208 1.0000 1.0000 1.0000
v 0.000000 -4.551087 -0.237943 1.0000 1.0000 1.0000
v 0.673887 2.467996 0.854311 1.0000 1.0000 1.0000
v 0.405700 5.710855 -0.377153 1.0000 1.0000 1.0000
v 0.477486 6.185968 0.584134 1.0000 1.0000 1.0000
v 0.565937 6.377491 -0.055462 1.0000 1.0000 1.0000
v 0.396087 6.971295 0.335050 1.0000 1.0000 1.0000
v 0.268297 6.525640 0.642023 1.0000 1.0000 1.0000
v 0.000000 7.231759 -0.168059 1.0000 1.0000 1.0000
v 0.000000 6.612318 0.672022 1.0000 1.0000 1.0000
v 0.472758 4.418923 0.726595 1.0000 1.0000 1.0000
v 0.583721 6.197536 0.311501 1.0000 1.0000 1.0000
v 0.600567 3.943285 -0.114438 1.0000 1.0000 1.0000
v 0.374047 -1.218932 -0.578121 1.0000 1.0000 1.0000
v 0.833880 -0.244701 0.328703 1.0000 1.0000 1.0000
v 0.693875 3.933032 0.255884 1.0000 1.0000 1.0000
v 0.375305 3.939402 -0.491750 1.0000 1.0000 1.0000
v 0.697787 3.161712 -0.558104 1.0000 1.0000 1.0000
v 0.973627 3.081568 0.100160 1.0000 1.0000 1.0000
v 0.863361 3.628467 0.057967 1.0000 1.0000 1.0000
v 0.606454 3.633325 -0.522150 1.0000 1.0000 1.0000
v 0.739181 3.675229 0.261655 1.0000 1.0000 1.0000
v 0.695823 3.196662 0.407817 1.0000 1.0000 1.0000
v 0.371916 3.642201 -0.535237 1.0000 1.0000 1.0000
v 0.544499 2.010821 -0.195393 1.0000 1.0000 1.0000
v 0.761531 -4.669816 -0.085327 1.0000 1.0000 1.0000
v 0.892868 -1.019317 -0.404332 1.0000 1.0000 1.0000
v 0.373494 -6.535595 0.505902 1.0000 1.0000 1.0000
v 0.268852 3.224286 -0.587662 1.0000 1.0000 1.0000
v 0.232214 6.714540 -0.428976 1.0000 1.0000 1.0000
v 0.494136 -4.669728 -0.252991 1.0000 1.0000 1.0000
v 0.270693 -4.667960 -0.070116 1.0000 1.0000 1.0000
v 0.332457 -4.661724 0.145779 1.0000 1.0000 1.0000
v 0.646627 -4.668502 0.205219 1.0000 1.0000 1.0000
v 0.529614 -3.408218 -0.013312 1.0000 1.0000 1.0000
v 0.012805 -7.100605 2.642565 1.0000 1.0000 1.0000
v 0.000000 -8.458237 2.537782 1.0000 1.0000 1.0000
v 0.017304 -7.693771 2.880327 1.0000 1.0000 1.0000
v 0.020545 -5.687507 1.262265 1.0000 1.0000 1.0000
v 0.413432 3.256099 1.160535 1.0000 1.0000 1.0000
v 6.604424 -1.983257 0.816511 1.0000 1.0000 1.0000
v 0.375432 -3.121869 1.222325 1.0000 1.0000 1.0000
v 4.112300 -0.819158 0.961986 1.0000 1.0000 1.0000
v 0.650667 -1.604838 1.037775 1.0000 1.0000 1.0000
v 1.418206 0.440915 1.210303 1.0000 1.0000 1.0000
v 4.116442 -0.875000 1.033536 1.0000 1.0000 1.0000
v 0.946289 2.569947 1.150222 1.0000 1.0000 1.0000
v 0.287058 1.842238 1.301260 1.0000 1.0000 1.0000
v 4.112922 -0.578990 0.972782 1.0000 1.0000 1.0000
v 0.000000 -3.119660 1.272703 1.0000 1.0000 1.0000
v 0.623089 -0.097641 1.045825 1.0000 1.0000 1.0000
v 1.423214 0.535621 1.081182 1.0000 1.0000 1.0000
v 6.606133 -3.245158 0.820182 1.0000 1.0000 1.0000
v 0.892868 -1.019317 -0.404332 1.0000 1.0000 1.0000
v 0.000000 -2.490839 -0.413644 1.0000 1.0000 1.0000
v -2.123258 -8.806833 2.727529 1.0000 1.0000 1.0000
v 0.000000 -6.985781 2.703290 1.0000 1.0000 1.0000
v -2.125400 -8.018018 2.750659 1.0000 1.0000 1.0000
v 0.000000 -8.893660 2.708750 1.0000 1.0000 1.0000
v -2.125040 -8.008743 2.695610 1.0000 1.0000 1.0000
v 0.000000 -7.789923 2.780796 1.0000 1.0000 1.0000
v 2.123258 -8.806833 2.727529 1.0000 1.0000 1.0000
v 2.125400 -8.018018 2.750659 1.0000 1.0000 1.0000
v 2.125040 -8.008743 2.695610 1.0000 1.0000 1.0000
v -0.375986 4.383209 1.122521 1.0000 1.0000 1.0000
v -0.000702 4.376760 1.298686 1.0000 1.0000 1.0000
v 0.375038 4.411723 1.121559 1.0000 1.0000 1.0000
v -2.191942 0.047115 0.657004 1.0000 1.0000 1.0000
v -2.308057 0.047115 0.657004 1.0000 1.0000 1.0000
v -2.250000 0.375000 0.657004 1.0000 1.0000 1.0000
v -2.250000 -1.625000 0.657004 1.0000 1.0000 1.0000
v -2.250000 -0.125000 1.027334 1.0000 1.0000 1.0000
v -2.308057 -0.452885 1.006374 1.0000 1.0000 1.0000
v -2.250000 -1.932801 0.981367 1.0000 1.0000 1.0000
v -2.191942 -0.452885 1.006374 1.0000 1.0000 1.0000
v 2.191942 0.047115 0.657004 1.0000 1.0000 1.0000
v 2.308057 0.047115 0.657004 1.0000 1.0000 1.0000
v 2.250000 0.375000 0.657004 1.0000 1.0000 1.0000
v 2.250000 -1.625000 0.657004 1.0000 1.0000 1.0000
v 2.250000 -0.125000 1.027334 1.0000 1.0000 1.0000
v 2.308057 -0.452885 1.006374 1.0000 1.0000 1.0000
v 2.250000 -1.932801 0.981367 1.0000 1.0000 1.0000
v 2.191942 -0.452885 1.006374 1.0000 1.0000 1.0000
vn -0.9938 -0.0263 0.1078
vn -0.9785 -0.0250 0.2049
vn -0.6519 -0.0261 0.7579
vn 0.6219 -0.1969 -0.7579
vn -0.5501 -0.0638 0.8327
vn -0.5024 -0.0735 -0.8615
vn -0.5864 -0.1405 -0.7977
vn -0.9933 0.0373 0.1097
vn -0.8876 0.1206 0.4445
vn -0.9652 0.1149 0.2349
vn -0.0000 -0.0058 1.0000
vn -0.8294 0.4406 -0.3434
vn -0.7866 0.1046 -0.6085
vn -0.2645 0.5427 0.7972
vn -0.0000 -0.0000 1.0000
vn 0.0706 0.9267 0.3692
vn 0.0552 0.7252 -0.6863
vn -0.6876 0.3117 0.6558
vn 0.9033 0.1736 0.3923
vn -0.9406 0.0104 -0.3393
vn 0.8095 0.2207 -0.5441
vn -0.8734 0.0168 -0.4866
vn -0.8908 0.3427 0.2984
vn -0.9226 0.3550 -0.1509
vn -0.4737 0.0364 -0.8800
vn 0.1056 -0.0969 -0.9897
vn -0.8878 -0.2958 0.3525
vn 0.1844 0.0582 0.9811
vn -0.9466 -0.1826 -0.2655
vn -0.6241 -0.1627 0.7642
vn -0.9996 -0.0116 -0.0247
vn -0.9798 -0.0329 0.1974
vn -0.8899 -0.2934 -0.3494
vn -0.2686 -0.1761 -0.9470
vn -0.9561 0.2175 0.1966
vn -0.0442 -0.0434 0.9981
vn -0.0641 -0.0154 0.9978
vn -0.1307 0.0866 0.9876
vn -0.1568 0.0626 0.9857
vn -0.0268 0.0358 -0.9990
vn 0.0373 0.0450 -0.9983
vn 0.0662 -0.1087 -0.9919
vn -0.0032 0.1308 -0.9914
vn 0.9983 -0.0000 0.0578
vn 0.3221 -0.0277 -0.9463
vn -0.7448 0.0145 0.6671
vn -0.7694 0.5273 -0.3605
vn -0.5725 0.8194 -0.0287
vn -0.9596 -0.0477 0.2773
vn -0.1330 -0.0031 0.9911
vn -0.9537 -0.1342 -0.2690
vn -0.9188 -0.1316 0.3721
vn -0.6775 -0.1112 0.7271
vn 0.0201 -0.0026 -0.9998
vn -0.9692 0.2364 0.0690
vn -0.9043 0.2264 0.3620
vn -0.3846 0.4304 0.8166
vn -0.9187 -0.0172 -0.3945
vn 0.0687 -0.0005 -0.9976
vn -0.9125 -0.0222 -0.4085
vn -0.9232 0.0290 -0.3833
vn -0.8958 0.2036 -0.3950
vn -0.9417 -0.1209 0.3139
vn -0.0817 0.0915 -0.9924
vn 0.9501 -0.0345 0.3100
vn -0.7593 0.1262 0.6384
vn -0.9578 0.1630 -0.2368
vn -0.3430 -0.0763 -0.9362
vn -0.8565 0.0652 -0.5120
vn 0.8345 0.2403 0.4958
vn -0.8556 0.2090 0.4736
vn -0.8950 0.0477 0.4435
vn -0.9310 0.0268 0.3639
vn -1.0000 -0.0071 -0.0040
vn -0.9594 -0.2758 -0.0594
vn -0.4741 0.0483 -0.8792
vn 0.0206 -0.0049 -0.9998
vn -0.1806 -0.1517 -0.9718
vn 0.9199 -0.1484 -0.3631
vn -0.9993 -0.0067 -0.0356
vn -0.9994 0.0291 0.0186
vn -1.0000 -0.0092 -0.0030
vn -0.0682 -0.0097 0.9976
vn -0.0146 0.0373 -0.9992
vn 0.0373 -0.0030 -0.9993
vn 0.0368 0.0047 -0.9993
vn -0.3947 0.7353 0.5510
vn -0.1732 0.2000 0.9644
vn 0.0099 0.0682 -0.9976
vn -0.9698 0.0403 0.2407
vn -0.9027 0.0142 0.4300
vn -0.9652 0.0063 0.2614
vn -0.7973 0.0292 0.6029
vn 0.9938 -0.0263 0.1078
vn 0.9785 -0.0250 0.2049
vn 0.6519 -0.0261 0.7579
vn -0.6219 -0.1969 -0.7579
vn 0.5514 -0.0633 0.8318
vn 0.5024 -0.0735 -0.8615
vn 0.5864 -0.1405 -0.7977
vn 0.9933 0.0373 0.1097
vn 0.8876 0.1206 0.4445
vn 0.9652 0.1149 0.2349
vn 0.8277 0.4538 -0.3300
vn 0.7866 0.1046 -0.6085
vn 0.2537 0.4983 0.8290
vn -0.0706 0.9267 0.3692
vn -0.0553 0.7252 -0.6863
vn 0.6602 0.2884 0.6935
vn -0.9033 0.1736 0.3923
vn 0.9353 -0.0123 -0.3535
vn -0.8023 0.2435 -0.5450
vn 0.8803 -0.0057 -0.4743
vn 0.8908 0.3427 0.2984
vn 0.9226 0.3549 -0.1509
vn 0.4737 0.0364 -0.8800
vn -0.1056 -0.0969 -0.9897
vn 0.8878 -0.2958 0.3525
vn -0.1844 0.0582 0.9811
vn 0.9466 -0.1826 -0.2655
vn 0.6241 -0.1627 0.7642
vn 0.9996 -0.0116 -0.0247
vn 0.9798 -0.0329 0.1974
vn 0.8899 -0.2934 -0.3494
vn 0.2686 -0.1761 -0.9470
vn 0.9561 0.2175 0.1966
vn 0.0442 -0.0434 0.9981
vn 0.0641 -0.0154 0.9978
vn 0.1307 0.0866 0.9876
vn 0.1568 0.0626 0.9857
vn 0.0268 0.0358 -0.9990
vn -0.0373 0.0450 -0.9983
vn -0.0662 -0.1087 -0.9919
vn 0.0032 0.1308 -0.9914
vn -0.9983 -0.0000 0.0578
vn -0.3221 -0.0277 -0.9463
vn 0.7448 0.0145 0.6671
vn 0.7800 0.5233 -0.3432
vn 0.5744 0.8181 -0.0287
vn 0.9596 -0.0477 0.2773
vn 0.4578 -0.1877 -0.8690
vn 0.1330 -0.0030 0.9911
vn 0.9537 -0.1342 -0.2690
vn 0.9188 -0.1316 0.3721
vn 0.6817 -0.1116 0.7230
vn -0.0000 0.4504 -0.8928
vn -0.0201 -0.0026 -0.9998
vn -0.0000 0.1672 -0.9859
vn 0.9701 0.2332 0.0673
vn 0.9081 0.2092 0.3627
vn 0.3134 0.4427 0.8401
vn 0.9989 0.0363 -0.0306
vn 0.9187 -0.0172 -0.3945
vn 0.3244 -0.0196 -0.9457
vn 0.9125 -0.0222 -0.4085
vn 0.8958 0.2036 -0.3950
vn 0.9417 -0.1209 0.3139
vn 0.0595 0.1098 -0.9922
vn -0.9501 -0.0345 0.3100
vn 0.7593 0.1262 0.6384
vn 0.9578 0.1630 -0.2368
vn -0.5289 -0.0927 -0.8436
vn 0.8565 0.0652 -0.5120
vn -0.8345 0.2403 0.4958
vn -0.9078 0.1158 0.4030
vn 0.8556 0.2090 0.4736
vn 0.8950 0.0477 0.4435
vn 0.9310 0.0268 0.3639
vn -0.5257 -0.1445 0.8383
vn 0.9594 -0.2758 -0.0594
vn 0.4741 0.0483 -0.8792
vn -0.0206 -0.0049 -0.9998
vn 0.1806 -0.1517 -0.9718
vn 0.9896 0.0600 0.1310
vn 0.9994 0.0291 0.0186
vn 1.0000 -0.0092 -0.0030
vn 0.1327 -0.0355 0.9905
vn 0.0146 0.0373 -0.9992
vn -0.0373 -0.0030 -0.9993
vn -0.0368 0.0047 -0.9993
vn 0.3942 0.7337 0.5534
vn 0.0882 0.0030 0.9961
vn 0.4226 0.0446 0.9052
vn -0.0099 0.0682 -0.9976
vn 0.9027 0.0142 0.4300
vn 0.9652 0.0063 0.2614
vn 0.7973 0.0292 0.6029
vn 1.0000 -0.0000 -0.0000
vn 0.0076 -0.0293 0.9995
vn -1.0000 -0.0025 -0.0070
vn -0.4294 0.8910 0.1473
vn -0.0105 -0.0400 -0.9991
vn -0.0244 0.0959 0.9951
vn 0.0050 -0.0029 -1.0000
vn -0.0076 -0.0293 0.9995
vn 1.0000 -0.0025 -0.0070
vn 0.4294 0.8910 0.1473
vn 0.0105 -0.0400 -0.9991
vn 0.0244 0.0959 0.9951
vn -0.0050 -0.0029 -1.0000
vn -0.0000 0.2734 -0.9619
vn -0.0000 0.6988 0.7154
vn -0.0000 -0.0041 1.0000
vn -0.0000 -0.0413 0.9991
vn -0.0000 0.1531 0.9882
vn -0.4578 -0.1877 -0.8690
vn -0.9927 -0.0338 0.1156
vn -0.9989 0.0363 -0.0306
vn -0.9175 0.1568 -0.3654
vn -0.0595 0.1098 -0.9922
vn 0.5289 -0.0927 -0.8436
vn 0.8531 0.2216 0.4723
vn 0.9104 0.0891 0.4039
vn 0.0472 0.1976 0.9791
vn 0.5257 -0.1445 0.8383
vn -0.9987 -0.0206 0.0459
vn -0.9896 0.0600 0.1310
vn -0.1327 -0.0355 0.9905
vn -0.3942 0.7337 0.5534
vn -0.0882 0.0030 0.9961
vn 0.9927 -0.0338 0.1156
vn -0.0687 -0.0005 -0.9976
vn 0.9232 0.0290 -0.3833
vn 0.9175 0.1568 -0.3654
vn 0.0817 0.0915 -0.9924
vn -0.3244 -0.0196 -0.9457
vn -0.8531 0.2216 0.4723
vn -0.0471 0.1989 0.9789
vn 1.0000 -0.0087 -0.0033
vn 0.9987 -0.0206 0.0459
vn -0.9199 -0.1484 -0.3631
vn 0.9993 -0.0067 -0.0356
vn 0.0682 -0.0097 0.9976
vn 0.3947 0.7353 0.5510
vn 0.1732 0.2000 0.9644
vn 0.4362 0.0504 0.8984
vn -0.0072 -0.0651 0.9979
vn 0.0072 -0.0651 0.9979
vn 0.3430 -0.0763 -0.9362
vn -0.4372 0.0503 0.8980
vn -0.4239 0.0446 0.9046
vn -0.0000 0.0010 1.0000
vn 0.9698 0.0403 0.2407
vn -0.0000 -0.0000 -1.0000
vn 0.9622 0.1561 0.2234
vn -0.9585 0.1697 0.2291
vn 0.9986 -0.0386 -0.0366
vn -0.9982 -0.0347 -0.0496
vn 0.9585 0.1697 0.2291
vn -0.9622 0.1561 0.2234
vn 0.9982 -0.0347 -0.0496
vn -0.9986 -0.0386 -0.0366
s 0
f 29//1 18//1 30//1
f 2//2 50//2 18//2
f 50//3 1//3 48//3
f 116//4 38//4 37//4
f 48//5 1//5 46//5
f 116//6 63//6 38//6
f 3//7 31//7 39//7
f 5//8 26//8 18//8
f 14//9 5//9 57//9
f 5//10 14//10 26//10
f 109//11 54//11 111//11
f 11//12 35//12 10//12
f 10//13 35//13 8//13
f 71//14 11//14 12//14
f 60//15 30//16 18//17
f 12//18 11//18 9//18
f 26//19 34//19 27//19
f 16//20 28//20 25//20
f 25//21 28//21 23//21
f 27//22 28//22 16//22
f 17//23 30//15 60//24
f 8//25 35//25 7//25
f 17//26 116//26 37//26
f 29//27 40//27 2//27
f 2//28 40//28 39//28
f 39//29 41//29 38//29
f 38//30 41//30 37//30
f 33//31 44//31 98//31
f 44//32 33//32 32//32
f 31//33 3//33 36//33
f 39//34 31//34 2//34
f 58//35 51//35 53//35
f 59//36 51//36 52//36
f 48//37 51//37 59//37
f 53//38 54//38 57//38
f 51//39 54//39 53//39
f 56//40 53//40 57//40
f 49//41 47//41 55//41
f 48//42 59//42 50//42
f 49//43 56//43 47//43
f 49//44 55//44 52//44
f 116//45 17//45 6//45
f 22//46 18//46 26//46
f 35//47 11//47 70//47
f 13//48 70//48 11//48
f 2//49 1//49 50//49
f 111//50 48//50 46//50
f 39//51 38//51 3//51
f 1//52 31//52 4//52
f 46//53 1//53 4//53
f 17//54 34//54 6//54
f 15//55 11//55 10//55
f 11//56 15//56 9//56
f 71//57 13//57 11//57
f 34//58 26//58 8//58
f 75//59 90//59 79//59
f 26//60 10//60 8//60
f 21//61 60//61 22//61
f 21//62 23//62 24//62
f 1//63 2//63 31//63
f 24//64 34//64 21//64
f 26//65 27//65 20//65
f 22//66 26//66 25//66
f 16//67 25//67 19//67
f 17//68 37//68 30//68
f 27//69 16//69 20//69
f 20//70 16//70 26//70
f 25//71 23//71 22//71
f 26//72 14//72 15//72
f 14//73 9//73 15//73
f 46//74 4//74 42//74
f 4//75 31//75 36//75
f 8//76 7//76 34//76
f 6//77 34//77 7//77
f 39//78 40//78 41//78
f 41//79 40//79 29//79
f 44//80 42//80 98//80
f 43//81 45//81 44//81
f 4//82 98//82 42//82
f 51//83 111//83 54//83
f 58//84 53//84 56//84
f 50//85 59//85 47//85
f 47//86 56//86 50//86
f 51//87 49//87 52//87
f 47//88 52//88 55//88
f 49//89 58//89 56//89
f 14//90 57//90 126//90
f 5//91 50//91 56//91
f 18//92 50//92 5//92
f 5//93 56//93 57//93
f 87//94 88//94 76//94
f 62//95 76//95 105//95
f 105//96 103//96 61//96
f 116//97 92//97 93//97
f 103//98 100//98 61//98
f 116//99 93//99 63//99
f 3//100 94//100 89//100
f 64//101 76//101 84//101
f 72//102 101//102 64//102
f 64//103 84//103 72//103
f 68//104 67//104 91//104
f 67//105 65//105 91//105
f 71//106 69//106 68//106
f 115//107 76//108 88//15
f 69//109 66//109 68//109
f 84//110 85//110 90//110
f 74//111 83//111 86//111
f 83//112 81//112 86//112
f 85//113 74//113 86//113
f 75//114 115//15 88//115
f 65//116 7//116 91//116
f 75//117 92//117 116//117
f 87//118 62//118 95//118
f 62//119 94//119 95//119
f 94//120 93//120 96//120
f 93//121 92//121 96//121
f 33//122 98//122 99//122
f 99//123 32//123 33//123
f 89//124 36//124 3//124
f 94//125 62//125 89//125
f 113//126 108//126 106//126
f 114//127 107//127 106//127
f 103//128 114//128 106//128
f 108//129 101//129 109//129
f 106//130 108//130 109//130
f 112//131 101//131 108//131
f 104//132 110//132 102//132
f 103//133 105//133 114//133
f 104//134 102//134 112//134
f 104//135 107//135 110//135
f 116//136 6//136 75//136
f 80//137 84//137 76//137
f 91//138 70//138 68//138
f 13//139 68//139 70//139
f 62//140 105//140 61//140
f 3//141 63//141 93//141
f 111//142 100//142 103//142
f 94//143 3//143 93//143
f 61//144 4//144 89//144
f 100//145 4//145 61//145
f 91//146 35//146 70//146
f 75//147 6//147 90//147
f 7//148 35//148 91//148
f 73//149 67//149 68//149
f 73//150 68//150 66//150
f 71//151 68//151 13//151
f 73//152 84//152 67//152
f 90//153 65//153 84//153
f 115//154 75//154 79//154
f 84//155 65//155 67//155
f 81//156 79//156 82//156
f 61//157 89//157 62//157
f 82//158 90//158 85//158
f 84//159 78//159 85//159
f 80//160 83//160 84//160
f 74//161 77//161 83//161
f 37//162 29//162 30//162
f 85//163 78//163 74//163
f 78//164 84//164 74//164
f 86//165 81//165 82//165
f 83//166 80//166 81//166
f 84//167 73//167 72//167
f 72//168 73//168 66//168
f 96//169 92//169 87//169
f 4//170 36//170 89//170
f 65//171 90//171 7//171
f 6//172 7//172 90//172
f 94//173 96//173 95//173
f 99//174 97//174 45//174
f 43//175 99//175 45//175
f 4//176 97//176 98//176
f 106//177 111//177 103//177
f 113//178 112//178 108//178
f 105//179 102//179 114//179
f 102//180 105//180 112//180
f 106//181 104//181 113//181
f 102//182 107//182 114//182
f 127//183 101//183 128//183
f 104//184 112//184 113//184
f 64//185 112//185 105//185
f 76//186 64//186 105//186
f 64//187 101//187 112//187
f 118//188 122//188 120//188
f 120//189 119//189 117//189
f 117//190 119//190 121//190
f 121//191 119//191 118//191
f 121//192 120//192 117//192
f 118//193 119//193 122//193
f 121//194 118//194 120//194
f 124//195 120//195 123//195
f 123//196 125//196 124//196
f 125//197 118//197 124//197
f 125//198 123//198 120//198
f 118//199 122//199 124//199
f 125//200 120//200 118//200
f 45//201 97//201 42//201
f 42//202 100//202 46//202
f 111//203 46//203 100//203
f 32//204 99//204 44//204
f 99//205 43//205 44//205
f 3//206 38//206 63//206
f 60//207 18//207 22//207
f 15//208 10//208 26//208
f 21//209 22//209 23//209
f 24//210 27//210 34//210
f 87//211 92//211 88//211
f 25//212 26//212 16//212
f 28//213 24//213 23//213
f 28//214 27//214 24//214
f 41//215 29//215 37//215
f 2//216 18//216 29//216
f 44//217 45//217 42//217
f 51//218 48//218 111//218
f 51//219 58//219 49//219
f 47//220 59//220 52//220
f 80//221 76//221 115//221
f 34//222 17//222 21//222
f 79//223 80//223 115//223
f 81//224 80//224 79//224
f 82//225 79//225 90//225
f 17//226 60//226 21//226
f 74//227 84//227 83//227
f 82//228 85//228 86//228
f 100//229 97//229 4//229
f 87//230 76//230 62//230
f 96//231 87//231 95//231
f 99//232 98//232 97//232
f 106//233 109//233 111//233
f 106//234 107//234 104//234
f 102//235 110//235 107//235
f 127//236 109//236 101//236
f 120//237 122//237 119//237
f 124//238 122//238 120//238
f 42//202 97//202 100//202
f 92//239 75//239 88//239
f 127//240 57//240 54//240
f 127//241 126//241 57//241
f 54//242 109//242 127//242
f 101//243 72//243 128//243
f 131//244 132//244 130//244
f 129//244 132//244 131//244
f 129//245 133//245 136//245
f 130//246 133//246 131//246
f 132//247 136//247 135//247
f 132//248 134//248 130//248
f 129//249 131//249 133//249
f 130//250 134//250 133//250
f 132//251 129//251 136//251
f 132//252 135//252 134//252
f 139//244 138//244 140//244
f 137//244 139//244 140//244
f 137//250 144//250 141//250
f 138//249 139//249 141//249
f 140//252 143//252 144//252
f 140//251 138//251 142//251
f 137//246 141//246 139//246
f 138//245 141//245 142//245
f 140//248 144//248 137//248
f 140//247 142//247 143//247
o canopy
v -0.331623 5.718502 1.077486 0.0000 0.0000 0.0000
v -0.477486 6.185968 0.584134 0.0000 0.0000 0.0000
v -0.268297 6.525640 0.642023 0.0000 0.0000 0.0000
v -0.472758 4.418923 0.726595 0.0000 0.0000 0.0000
v 0.331623 5.718502 1.077486 0.0000 0.0000 0.0000
v 0.000000 5.706326 1.297336 0.0000 0.0000 0.0000
v 0.477486 6.185968 0.584134 0.0000 0.0000 0.0000
v 0.268297 6.525640 0.642023 0.0000 0.0000 0.0000
v 0.000000 6.612318 0.672022 0.0000 0.0000 0.0000
v 0.472758 4.418923 0.726595 0.0000 0.0000 0.0000
v -0.375986 4.383209 1.122521 0.0000 0.0000 0.0000
v -0.000702 4.376760 1.298686 0.0000 0.0000 0.0000
v 0.375038 4.411723 1.121559 0.0039 0.0000 0.0078
vn -0.9529 0.0218 0.3024
vn -0.4835 0.4447 0.7540
vn -0.7433 0.3619 0.5626
vn -0.2656 0.5476 0.7934
vn 0.4881 0.0229 0.8725
vn 0.9529 0.0218 0.3024
vn 0.4835 0.4447 0.7540
vn 0.7433 0.3619 0.5626
vn 0.2656 0.5476 0.7934
vn -0.4881 0.0234 0.8725
vn 0.9698 0.0403 0.2407
vn -0.9698 0.0403 0.2407
s 0
f 145//253 146//253 148//253
f 150//254 147//254 145//254
f 145//255 147//255 146//255
f 153//256 147//256 150//256
f 150//257 156//257 149//257
f 149//258 154//258 151//258
f 150//259 149//259 152//259
f 149//260 151//260 152//260
f 153//261 150//261 152//261
f 145//262 155//262 156//262
f 150//262 145//262 156//262
f 154//263 149//263 157//263
f 156//257 157//257 149//257
f 155//264 145//264 148//264
o bomba1
v -2.250000 0.259540 0.586073 1.0000 0.0157 0.0157
v -1.925240 0.259540 0.398573 1.0000 0.1725 0.1725
v -1.925240 0.259540 0.023573 1.0000 0.0314 0.0314
v -2.250000 0.259540 -0.163927 1.0000 0.0549 0.0549
v -2.574759 0.259540 0.023573 1.0000 0.2667 0.2667
v -2.574759 0.259540 0.398573 1.0000 0.0000 0.0000
v -2.250000 0.947346 0.211073 1.0000 0.0196 0.0196
v -2.250000 -2.052654 0.347972 1.0000 0.0000 0.0000
v -2.131441 -2.052654 0.279523 1.0000 0.0000 0.0000
v -2.131441 -2.052654 0.142623 1.0000 0.0000 0.0000
v -2.250000 -2.052654 0.074173 1.0000 0.0000 0.0000
v -2.368558 -2.052654 0.142623 1.0000 0.0039 0.0039
v -2.368558 -2.052654 0.279523 1.0000 0.0078 0.0078
v -2.250000 -0.917947 0.586073 1.0000 0.4039 0.4039
v -2.574759 -0.917947 0.398573 1.0000 0.0118 0.0118
v -2.574759 -0.917947 0.023573 1.0000 0.0000 0.0000
v -2.250000 -0.917947 -0.163927 1.0000 0.2745 0.2745
v -1.925240 -0.917947 0.023573 1.0000 0.0000 0.0000
v -1.925240 -0.917947 0.398573 1.0000 0.0431 0.0431
v -2.515165 -1.902654 0.476238 1.0000 0.5412 0.5412
v -2.374441 -1.802654 0.335514 1.0000 0.0000 0.0000
v -2.515165 -2.052654 0.476238 1.0000 0.8745 0.8745
v -2.336772 -2.052654 0.297846 1.0000 0.0000 0.0000
v -2.515165 -1.902654 -0.054092 1.0000 0.0980 0.0980
v -2.374441 -1.802654 0.086632 1.0000 0.0235 0.0235
v -2.515165 -2.052654 -0.054092 1.0000 0.0784 0.0784
v -2.336772 -2.052654 0.124300 1.0000 0.2392 0.2392
v -1.984835 -1.902654 -0.054092 1.0000 0.1216 0.1216
v -2.125559 -1.802654 0.086632 1.0000 0.0314 0.0314
v -1.984835 -2.052654 -0.054092 1.0000 0.1569 0.1569
v -2.163227 -2.052654 0.124300 1.0000 0.1059 0.1059
v -1.984835 -1.902654 0.476238 1.0000 0.0000 0.0000
v -2.125559 -1.802654 0.335514 1.0000 0.0039 0.0039
v -1.984835 -2.052654 0.476238 1.0000 0.0353 0.0353
v -2.163227 -2.052654 0.297846 1.0000 0.0000 0.0000
v -2.250000 -0.327236 0.586073 1.0000 0.0000 0.0000
v -2.250000 -0.873103 0.586073 1.0000 0.0078 0.0078
v -2.250000 -0.392865 0.657004 1.0000 0.0039 0.0039
v -2.250000 -0.807473 0.657004 1.0000 0.0000 0.0000
vn -0.9043 0.4270 -0.0000
vn 0.4521 0.4270 -0.7831
vn 0.4521 0.4270 0.7831
vn -0.4521 0.4270 0.7831
vn -0.4521 0.4270 -0.7831
vn 0.9043 0.4270 -0.0000
vn -0.4919 -0.1788 0.8521
vn -0.4919 -0.1788 -0.8521
vn 0.9839 -0.1788 -0.0000
vn -0.9839 -0.1788 -0.0000
vn 0.4919 -0.1788 -0.8521
vn 0.4919 -0.1788 0.8521
vn 0.5000 -0.0000 0.8660
vn 0.5000 -0.0000 -0.8660
vn -1.0000 -0.0000 -0.0000
vn 1.0000 -0.0000 -0.0000
vn -0.5000 -0.0000 -0.8660
vn -0.5000 -0.0000 0.8660
vn -0.0000 -1.0000 -0.0000
vn -0.7071 -0.0000 -0.7071
vn 0.7071 -0.0000 -0.7071
vn -0.7071 -0.0000 0.7071
s 0
f 163//265 164//265 162//265
f 161//266 164//266 160//266
f 159//267 164//267 158//267
f 158//268 164//268 163//268
f 162//269 164//269 161//269
f 160//270 164//270 159//270
f 170//271 171//271 172//271
f 168//272 173//272 174//272
f 166//273 175//273 176//273
f 169//274 172//274 173//274
f 175//275 168//275 174//275
f 165//276 176//276 171//276
f 171//277 159//277 158//277
f 175//278 161//278 160//278
f 173//279 163//279 162//279
f 176//280 160//280 159//280
f 174//281 162//281 161//281
f 172//282 158//282 163//282
f 165//283 169//283 167//283
f 177//284 180//284 179//284
f 181//285 184//285 183//285
f 185//284 188//284 186//284
f 189//286 192//286 191//286
f 193//280 196//280 194//280
f 170//271 165//271 171//271
f 168//272 169//272 173//272
f 166//273 167//273 175//273
f 169//274 170//274 172//274
f 175//275 167//275 168//275
f 165//276 166//276 176//276
f 171//277 176//277 159//277
f 175//278 174//278 161//278
f 173//279 172//279 163//279
f 176//280 175//280 160//280
f 174//281 173//281 162//281
f 172//282 171//282 158//282
f 167//283 166//283 165//283
f 165//283 170//283 169//283
f 169//283 168//283 167//283
f 177//284 178//284 180//284
f 181//285 182//285 184//285
f 185//284 187//284 188//284
f 189//286 190//286 192//286
f 193//280 195//280 196//280
o bomba0
v 2.250000 0.259540 0.586073 1.0000 0.0157 0.0157
v 1.925240 0.259540 0.398573 1.0000 0.1725 0.1725
v 1.925240 0.259540 0.023573 1.0000 0.0314 0.0314
v 2.250000 0.259540 -0.163927 1.0000 0.0549 0.0549
v 2.574759 0.259540 0.023573 1.0000 0.2667 0.2667
v 2.574759 0.259540 0.398573 1.0000 0.0000 0.0000
v 2.250000 0.947346 0.211073 1.0000 0.0196 0.0196
v 2.250000 -2.052654 0.347972 1.0000 0.0000 0.0000
v 2.131441 -2.052654 0.279523 1.0000 0.0000 0.0000
v 2.131441 -2.052654 0.142623 1.0000 0.0000 0.0000
v 2.250000 -2.052654 0.074173 1.0000 0.0000 0.0000
v 2.368558 -2.052654 0.142623 1.0000 0.0039 0.0039
v 2.368558 -2.052654 0.279523 1.0000 0.0078 0.0078
v 2.250000 -0.917947 0.586073 1.0000 0.4039 0.4039
v 2.574759 -0.917947 0.398573 1.0000 0.0118 0.0118
v 2.574759 -0.917947 0.023573 1.0000 0.0000 0.0000
v 2.250000 -0.917947 -0.163927 1.0000 0.2745 0.2745
v 1.925240 -0.917947 0.023573 1.0000 0.0000 0.0000
v 1.925240 -0.917947 0.398573 1.0000 0.0431 0.0431
v 2.515165 -1.902654 0.476238 1.0000 0.5412 0.5412
v 2.374441 -1.802654 0.335514 1.0000 0.0000 0.0000
v 2.515165 -2.052654 0.476238 1.0000 0.8745 0.8745
v 2.336772 -2.052654 0.297846 1.0000 0.0000 0.0000
v 2.515165 -1.902654 -0.054092 1.0000 0.0980 0.0980
v 2.374441 -1.802654 0.086632 1.0000 0.0235 0.0235
v 2.515165 -2.052654 -0.054092 1.0000 0.0784 0.0784
v 2.336772 -2.052654 0.124300 1.0000 0.2392 0.2392
v 1.984835 -1.902654 -0.054092 1.0000 0.1216 0.1216
v 2.125559 -1.802654 0.086632 1.0000 0.0314 0.0314
v 1.984835 -2.052654 -0.054092 1.0000 0.1569 0.1569
v 2.163227 -2.052654 0.124300 1.0000 0.1059 0.1059
v 1.984835 -1.902654 0.476238 1.0000 0.0000 0.0000
v 2.125559 -1.802654 0.335514 1.0000 0.0039 0.0039
v 1.984835 -2.052654 0.476238 1.0000 0.0353 0.0353
v 2.163227 -2.052654 0.297846 1.0000 0.0000 0.0000
v 2.250000 -0.327236 0.586073 1.0000 0.0000 0.0000
v 2.250000 -0.873103 0.586073 1.0000 0.0078 0.0078
v 2.250000 -0.392865 0.657004 1.0000 0.0039 0.0039
v 2.250000 -0.807473 0.657004 1.0000 0.0000 0.0000
vn 0.9043 0.4270 -0.0000
vn -0.4521 0.4270 -0.7831
vn -0.4521 0.4270 0.7831
vn 0.4521 0.4270 0.7831
vn 0.4521 0.4270 -0.7831
vn -0.9043 0.4270 -0.0000
vn 0.4919 -0.1788 0.8521
vn 0.4919 -0.1788 -0.8521
vn -0.9839 -0.1788 -0.0000
vn 0.9839 -0.1788 -0.0000
vn -0.4919 -0.1788 -0.8521
vn -0.4919 -0.1788 0.8521
vn -0.5000 -0.0000 0.8660
vn -0.5000 -0.0000 -0.8660
vn 1.0000 -0.0000 -0.0000
vn -1.0000 -0.0000 -0.0000
vn 0.5000 -0.0000 -0.8660
vn 0.5000 -0.0000 0.8660
vn -0.0000 -1.0000 -0.0000
vn -0.7071 -0.0000 0.7071
vn -0.7071 -0.0000 -0.7071
vn 0.7071 -0.0000 0.7071
s 0
f 202//287 201//287 203//287
f 200//288 199//288 203//288
f 198//289 197//289 203//289
f 197//290 202//290 203//290
f 201//291 200//291 203//291
f 199//292 198//292 203//292
f 210//293 209//293 211//293
f 213//294 208//294 207//294
f 214//295 205//295 215//295
f 211//296 208//296 212//296
f 213//297 206//297 214//297
f 210//298 205//298 204//298
f 198//299 210//299 197//299
f 200//300 214//300 199//300
f 202//301 212//301 201//301
f 199//302 215//302 198//302
f 201//303 213//303 200//303
f 197//304 211//304 202//304
f 206//305 208//305 204//305
f 216//306 219//306 218//306
f 220//307 223//307 221//307
f 224//306 227//306 225//306
f 228//308 231//308 229//308
f 235//302 232//302 233//302
f 210//293 204//293 209//293
f 213//294 212//294 208//294
f 214//295 206//295 205//295
f 211//296 209//296 208//296
f 213//297 207//297 206//297
f 210//298 215//298 205//298
f 198//299 215//299 210//299
f 200//300 213//300 214//300
f 202//301 211//301 212//301
f 199//302 214//302 215//302
f 201//303 212//303 213//303
f 197//304 210//304 211//304
f 204//305 205//305 206//305
f 206//305 207//305 208//305
f 208//305 209//305 204//305
f 216//306 217//306 219//306
f 220//307 222//307 223//307
f 224//306 226//306 227//306
f 228//308 230//308 231//308
f 235//302 234//302 232//302

]]
}

-- split functions derived from https://stackoverflow.com/a/7615129
function splitstring (inputstr, sep)
    if not sep then
       sep = string.char(10)
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
       table.insert(t, str)
    end
    return t
end

function splitnumber(str,rule)
    local rule=rule or "%S+"
    local t = {}
    for n in str:gmatch(rule) do
        table.insert(t, tonumber(n))
    end
    return table.unpack(t)
end

models_parsed={}
o="ungrouped"
for i,v in ipairs(models_raw) do
			lines=splitstring(v)
			models_parsed[i]={v={},vn={},f={},o={}}
			for ii,vv in ipairs(lines) do
						local pf=string.sub(vv,1,2) -- prefix
						local d=string.sub(vv,3,-1) -- others
						local d2=string.sub(vv,4,-1) -- vn
						if pf=="v " then
									table.insert(models_parsed[i]["v"],{o=o,splitnumber(d)})
						elseif pf=="vn" then
									table.insert(models_parsed[i]["vn"],{o=o,splitnumber(d2)})
						elseif pf=="f " then
									table.insert(models_parsed[i]["f"],{o=o,splitnumber(d,"[+-]?%d+")})
						elseif pf=="o " then
									table.insert(models_parsed[i]["o"],d)
									o=d
						end
			end
end



-- <TILES>
-- 001:2000000000000000000000000000000000000000000000000000000000000000
-- </TILES>

-- <SPRITES>
-- 000:0123456709abcdef000000000000000000000000000000000000000000000000
-- </SPRITES>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:13579abcddeeeeeeeeeddcba98753100
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:012701003100910091009100910091009100a100a100a100a100a100a100b100b100b100c100c100c100c100d100d100d100d100e100e100e100f100200000000000
-- 001:000050009000c000e000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000205000000000
-- 002:bff6ce06cf05cef4df04de03dff2ee01ef0feefeef0dee0ceffbee09ef08eef0ef0fee0feffeee0eef0deefcef0cee0beffbee0aef09eef9ef09ee08f0b000000000
-- 003:cf07ef07ef07ee07ef07ee07ef06ee06ef06ef06ee06ee06ee06ef06ef06ee05ee05ef05ef05ee04ee04e003e003e002f002f001f001f000f00ff00e355005000000
-- 004:02000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020020b000000000
-- 015:020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200000000000000
-- </SFX>

-- <PATTERNS>
-- 000:400002000000900002000000c00004000000900002000000400002000000900004000000c00002000000900002000000400004000000900002000000c00002000000900004000000c00002000000900002000000c00004000000900002000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:e00000000000900002000000b00004000000700002000000e00000000000900004000000b00004000000700002000000e00000000000900002000000b00002000000700000000000e00002000000900002000000b00002000000700002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:900006000000000000000000900006000000000000000000900006000000000000900006000000100000c00006000000400006000000000000000000000000400006000000000000400006000000000000000000400006000000700006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:e00006000000000000000000000000000000000000000000000000000000b00006000000c00006000000b00006000000c00006000000b00006000000900006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:400008000000000000e00006000000000000c00006000000e00006100000000000000000000000c00006b00006100000c00006b00006900006000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:900006000000000000000000c00006000000000000000000400008000000000000000000000000000000e00006000000c00006000000000000000000b00006000000000000700006703206000000e03204000000c03204000000b03204000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:b00006000000000000000000b00006000000000000000000b00006000000900006000000700006000000900006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:b00006000000600008000000e00006000000b00006000000400008000000d00006000000900006000000e00006000000b00006000000600006000000d00006000000900006000000400006000000000000000000e00004000000400006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:e00006000000400008000000e00008000000400008000000d00008000000000000000000900008000000b00008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 019:90001000000000000000000090002c00000000000000000090001000000000000000000090002c00000000000000000090001000000000000000000090002c00000000000090001090001000001000001000000090002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 029:00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e00000000003090003e90003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 030:00000000000090003e90003e00000000000090003e90003e00000000000090003e90003e00000000000090003e90003e00000000000090003e90003e00000000000090003e90003e00003000000090003e90003e00003000000090003e90003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </PATTERNS>

-- <TRACKS>
-- 000:100000100000105000105000205e10205f10105ed0105e11105ed0105e51105e91105e11205e12205e52205e10205e10000210
-- </TRACKS>

-- <PALETTE>
-- 000:08080c101418181c241c2028282c3038383c50484c6959550c0c0c282c3c303444343844383c484c505d50555d858189
-- </PALETTE>

